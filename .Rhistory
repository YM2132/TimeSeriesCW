# Plot the forecast components
components_plot <- prophet_plot_components(model, preds)
dyplot.prophet(model, preds)
# Print the predicted values
print(preds[['yhat']])
# Ensure both are Date objects
df$ds <- as.Date(df$ds)
dropped_data$predicted <- historical_forecast$yhat[dropped_data$ds %in% historical_forecast$ds]
dropped_data$residuals <- dropped_data$y - dropped_data$predicted
# Plot the residuals
ggplot(dropped_data, aes(x = ds, y = residuals)) +
geom_line() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Residuals Over Time", x = "Time", y = "Residuals")
library(lmtest)
# Assuming your residuals and predicted values are correctly calculated
bp_test <- bptest(dropped_data$residuals ~ dropped_data$predicted, data = dropped_data)
print(bp_test)
rlang::last_trace()
# Assuming `df` is your original dataset with actual values
historical_forecast <- preds[preds$ds %in% dropped_data$ds, ]
dropped_data$predicted <- historical_forecast$yhat[dropped_data$ds %in% historical_forecast$ds]
preds$ds <- as.Date(preds$ds)
# Assuming `df` is your original dataset with actual values
historical_forecast <- preds[preds$ds %in% dropped_data$ds, ]
dropped_data$predicted <- historical_forecast$yhat[dropped_data$ds %in% historical_forecast$ds]
dropped_data$residuals <- dropped_data$y - dropped_data$predicted
# Plot the residuals
ggplot(dropped_data, aes(x = ds, y = residuals)) +
geom_line() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Residuals Over Time", x = "Time", y = "Residuals")
library(lmtest)
# Assuming your residuals and predicted values are correctly calculated
bp_test <- bptest(dropped_data$residuals ~ dropped_data$predicted, data = dropped_data)
print(bp_test)
yearly_data <- dropped_data %>%
group_by(year = year(ds)) %>%
summarise(y = sum(y))
yearly_data$ds <- as.Date(paste0(yearly_data$year, "-01-01"))
ggplot(data = yearly_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Occurrences", title = "Occurrences Over Time") +
theme_minimal()
View(yearly_data)
dropped_data <- data.frame(
ds = as.Date(data$yearmon),
y = data$y
)
print(dropped_data)
ggplot(data = dropped_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Occurrences", title = "Occurrences Over Time") +
theme_minimal()
# Fit the model
model <- prophet(dropped_data)
# Make a dataframe to hold predictions for the next 12 months
future <- make_future_dataframe(model, periods = 60, freq = "month")
# Generate predictions
preds <- predict(model, future)
# Plot the forecast with yearly dates on the x-axis
plot(model, preds)
# Plot the forecast components
components_plot <- prophet_plot_components(model, preds)
dyplot.prophet(model, preds)
# Print the predicted values
print(preds[['yhat']])
# Ensure both are Date objects
preds$ds <- as.Date(preds$ds)
# Assuming `df` is your original dataset with actual values
historical_forecast <- preds[preds$ds %in% dropped_data$ds, ]
dropped_data$predicted <- historical_forecast$yhat[dropped_data$ds %in% historical_forecast$ds]
dropped_data$residuals <- dropped_data$y - dropped_data$predicted
# Plot the residuals
ggplot(dropped_data, aes(x = ds, y = residuals)) +
geom_line() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Residuals Over Time", x = "Time", y = "Residuals")
library(lmtest)
# Assuming your residuals and predicted values are correctly calculated
bp_test <- bptest(dropped_data$residuals ~ dropped_data$predicted, data = dropped_data)
print(bp_test)
yearly_data <- dropped_data %>%
group_by(year = year(ds)) %>%
summarise(y = sum(y))
yearly_data$ds <- as.Date(paste0(yearly_data$year, "-01-01"))
ggplot(data = yearly_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Occurrences", title = "Occurrences Over Time") +
theme_minimal()
model_yearly <- prophet(yearly_data)
future <- make_future_dataframe(model, periods = 5, freq = "year")
preds <- predict(model_yearly, future)
dyplot.prophet(model_yearly, preds)
View(yearly_data)
ggplot(data = yearly_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Occurrences", title = "Occurrences Over Time") +
theme_minimal()
model_yearly <- prophet(yearly_data)
View(yearly_data)
future <- make_future_dataframe(model, periods = 1, freq = "year")
preds <- predict(model_yearly, future)
dyplot.prophet(model_yearly, preds)
plot(model_yearly, preds)
prophet_plot_components(model_yearly, preds)
ggplot(data = yearly_data, aes(x = ds, y = log(y)) +
ggplot(data = yearly_data, aes(x = ds, y = log(y)) +
geom_point() + # Adds points at each data point
theme_minimal()
ggplot(data = yearly_data, aes(x = ds, y = log(y))) +
ggplot(data = yearly_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Occurrences", title = "Occurrences Over Time") +
theme_minimal()
yearly_data$y <- log(yearly_data$y)
yearly_data$ds <- as.Date(paste0(yearly_data$year, "-01-01"))
ggplot(data = yearly_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Occurrences", title = "Occurrences Over Time") +
theme_minimal()
ggplot(data = yearly_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Questions", title = "Questions Over Time") +
theme_minimal()
model_yearly <- prophet(yearly_data)
future <- make_future_dataframe(model, periods = 1, freq = "year")
preds <- predict(model_yearly, future)
plot(model_yearly, preds)
dyplot.prophet(model_yearly, preds)
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
# Load the necessary libraries
library(zoo)
library(ggplot2)
library(prophet)
library(dygraphs)
library(dplyr)
library(lmtest)
library(lubridate)
})
model <- prophet(dropped_data, interval.width = 0.8, seasonality.mode = "multiplicative")
future <- make_future_dataframe(model, periods = 12, freq = "month")
preds <- predict(model, future)
dropped_data$cap <- 1.2 * max(dropped_data$y)
model <- prophet(dropped_data, interval.width = 0.8, growth = 'logistic')
future <- make_future_dataframe(model, periods = 36, freq = "month")
preds <- predict(model, future)
dropped_data$cap <- 1.2 * max(dropped_data$y)
model <- prophet(dropped_data, interval.width = 0.8, growth = 'logistic')
data = read.csv("TotalQuestions.csv")
data <- data %>%
mutate(Questions = rowSums(select(., -Month)))
data$yearmon <- as.yearmon(data$Month, "%Y-%m")
data <- rename(data, ds = Month, y = Questions)
dropped_data <- data.frame(
ds = as.Date(data$yearmon),
y = data$y,
cap = 1.2 * max(data$y)
)
ggplot(data = dropped_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Questions", title = "Questions Over Time") +
theme_minimal()
dropped_data
# Clear the environment
rm(list=ls())
model <- prophet(dropped_data, changepoint.prior.scale = 0.005)
model <- prophet(dropped_data, changepoint.prior.scale = 0.5)
library(dplyr)
library(zoo)
library(lubridate) # For year() and month()
library(ggplot2)
library(prophet)
library(dygraphs)
data = read.csv("TotalQuestions.csv")
# Sum up the counts of each question for each language per month
data <- data %>%
mutate(Questions = rowSums(select(., -Month)))
# Convert the Month column to a Date column
data$yearmon <- as.yearmon(data$Month, "%Y-%m")
# Ready for Prophet model
data <- rename(data, ds = Month, y = Questions)
dropped_data <- data.frame(
ds = as.Date(data$yearmon),
y = data$y
)
print(dropped_data)
ggplot(data = dropped_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Occurrences", title = "Occurrences Over Time") +
theme_minimal()
# Fit the model
model <- prophet(dropped_data)
# Make a dataframe to hold predictions for the next 12 months
future <- make_future_dataframe(model, periods = 60, freq = "month")
View(future)
# Generate predictions
preds <- predict(model, future)
# Plot the forecast with yearly dates on the x-axis
plot(model, preds)
# Assuming `df` is your original dataset with actual values
historical_forecast <- preds[preds$ds %in% dropped_data$ds, ]
dropped_data$predicted <- historical_forecast$yhat[dropped_data$ds %in% historical_forecast$ds]
# Assuming `df` is your original dataset with actual values
historical_forecast <- preds[preds$ds %in% dropped_data$ds, ]
dropped_data$predicted <- historical_forecast$yhat[dropped_data$ds %in% historical_forecast$ds]
View(preds)
View(dropped_data)
dropped_data$predicted <- historical_forecast$yhat[dropped_data$ds %in% historical_forecast$ds]
View(historical_forecast)
# Assuming `df` is your original dataset with actual values
historical_forecast <- preds[preds$ds %in% dropped_data$ds ]
View(historical_forecast)
# Assuming `df` is your original dataset with actual values
historical_forecast <- preds[preds$ds %in% dropped_data$ds, ]
dropped_data$residuals <- dropped_data$y - dropped_data$predicted
# Ensure both are Date objects
preds$ds <- as.Date(preds$ds)
# Assuming `df` is your original dataset with actual values
historical_forecast <- preds[preds$ds %in% dropped_data$ds, ]
dropped_data$predicted <- historical_forecast$yhat[dropped_data$ds %in% historical_forecast$ds]
View(dropped_data)
dropped_data$abs_error <- abs(dropped_data$y - dropped_data$predicted)
print(dropped_data)
# Calculate MAE, RMSE, and MAPE
mae <- mean(df$abs_error, na.rm = TRUE)
# Calculate MAE, RMSE, and MAPE
mae <- mean(dropped_data$abs_error, na.rm = TRUE)
# Print the error metrics
cat("MAE:", mae, "\n")
# Fit the model
model <- prophet(dropped_data, changepoint.prior.scale = 0.5)
# Make a dataframe to hold predictions for the next 12 months
future <- make_future_dataframe(model, periods = 36, freq = "month")
# Generate predictions
preds <- predict(model, future)
# Plot the forecast with yearly dates on the x-axis
plot(model, preds)
# Plot the forecast components
components_plot <- prophet_plot_components(model, preds)
dyplot.prophet(model, preds)
# Print the predicted values
print(preds[['yhat']])
# Ensure both are Date objects
preds$ds <- as.Date(preds$ds)
# Assuming `df` is your original dataset with actual values
historical_forecast <- preds[preds$ds %in% dropped_data$ds, ]
dropped_data$predicted <- historical_forecast$yhat[dropped_data$ds %in% historical_forecast$ds]
dropped_data$residuals <- dropped_data$y - dropped_data$predicted
dropped_data$abs_error <- abs(dropped_data$y - dropped_data$predicted)
print(dropped_data)
# Calculate MAE, RMSE, and MAPE
mae <- mean(dropped_data$abs_error, na.rm = TRUE)
# Print the error metrics
cat("MAE:", mae, "\n")
yearly_data <- dropped_data %>%
group_by(year = year(ds)) %>%
summarise(y = sum(y))
yearly_data$ds <- as.Date(paste0(yearly_data$year, "-01-01"))
ggplot(data = yearly_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Questions", title = "Questions Over Time") +
theme_minimal()
model_yearly <- prophet(yearly_data)
future <- make_future_dataframe(model, periods = 1, freq = "year")
preds <- predict(model_yearly, future)
plot(model_yearly, preds)
dyplot.prophet(model_yearly, preds)
yearly_data$y <- log(yearly_data$y)
yearly_data$ds <- as.Date(paste0(yearly_data$year, "-01-01"))
ggplot(data = yearly_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Questions", title = "Questions Over Time") +
theme_minimal()
model_yearly <- prophet(yearly_data)
future <- make_future_dataframe(model, periods = 1, freq = "year")
model_yearly <- prophet(yearly_data, changepoint.prior.scale = 0.5)
yearly_data <- dropped_data %>%
group_by(year = year(ds)) %>%
summarise(y = sum(y))
yearly_data$ds <- as.Date(paste0(yearly_data$year, "-01-01"))
ggplot(data = yearly_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Questions", title = "Questions Over Time") +
theme_minimal()
model_yearly <- prophet(yearly_data, changepoint.prior.scale = 0.5)
future <- make_future_dataframe(model, periods = 1, freq = "year")
preds <- predict(model_yearly, future)
plot(model_yearly, preds)
dyplot.prophet(model_yearly, preds)
yearly_data <- dropped_data %>%
group_by(year = year(ds)) %>%
summarise(y = sum(y))
yearly_data$ds <- as.Date(paste0(yearly_data$year, "-01-01"))
ggplot(data = yearly_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Questions", title = "Questions Over Time") +
theme_minimal()
model_yearly <- prophet(yearly_data, changepoint.prior.scale = 0.5)
future <- make_future_dataframe(model_yearly, periods = 3, freq = "year")
preds <- predict(model_yearly, future)
dyplot.prophet(model_yearly, preds)
prophet_plot_components(model_yearly, preds)
# Assuming `df` is your original dataset with actual values
historical_forecast <- preds[preds$ds %in% dropped_data$ds, ]
dropped_data$predicted <- historical_forecast$yhat[dropped_data$ds %in% historical_forecast$ds]
# Assuming `df` is your original dataset with actual values
historical_forecast_yearly <- preds[preds$ds %in% yearly_data$ds, ]
yearly_data$predicted <- historical_forecast_yearly$yhat[dropped_data$ds %in% historical_forecast_yearly$ds]
preds$ds <- as.Date(preds$ds)
# Assuming `df` is your original dataset with actual values
historical_forecast_yearly <- preds[preds$ds %in% yearly_data$ds, ]
yearly_data$predicted <- historical_forecast_yearly$yhat[dropped_data$ds %in% historical_forecast_yearly$ds]
View(historical_forecast_yearly)
View(yearly_data)
yearly_data <- dropped_data %>%
group_by(year = year(ds)) %>%
summarise(y = sum(y))
yearly_data$ds <- as.Date(paste0(yearly_data$year, "-01-01"))
ggplot(data = yearly_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Questions", title = "Questions Over Time") +
theme_minimal()
model_yearly <- prophet(yearly_data, changepoint.prior.scale = 0.5)
future <- make_future_dataframe(model_yearly, periods = 3, freq = "year")
preds <- predict(model_yearly, future)
dyplot.prophet(model_yearly, preds)
prophet_plot_components(model_yearly, preds)
preds$ds <- as.Date(preds$ds)
# Assuming `df` is your original dataset with actual values
historical_forecast_yearly <- preds[preds$ds %in% yearly_data$ds, ]
yearly_data$predicted <- historical_forecast_yearly$yhat[dropped_data$ds %in% historical_forecast_yearly$ds]
# Assuming `df` is your original dataset with actual values
historical_forecast_yearly <- preds[preds$ds %in% yearly_data$ds, ]
yearly_data$predicted <- historical_forecast_yearly$yhat[yearly_data$ds %in% historical_forecast_yearly$ds]
yearly_data$abs_error <- abs(yearly_data$y - yearly_data$predicted)
# Calculate MAE, RMSE, and MAPE
mae <- mean(yearly_data$abs_error, na.rm = TRUE)
cat("MAE:", mae, "\n")
# Fit the model
model <- prophet(dropped_data, changepoint.prior.scale = 0.75)
# Make a dataframe to hold predictions for the next 12 months
future <- make_future_dataframe(model, periods = 36, freq = "month")
# Generate predictions
preds <- predict(model, future)
# Plot the forecast with yearly dates on the x-axis
plot(model, preds)
# Plot the forecast components
components_plot <- prophet_plot_components(model, preds)
dyplot.prophet(model, preds)
# Print the predicted values
print(preds[['yhat']])
# Ensure both are Date objects
preds$ds <- as.Date(preds$ds)
# Assuming `df` is your original dataset with actual values
historical_forecast <- preds[preds$ds %in% dropped_data$ds, ]
dropped_data$predicted <- historical_forecast$yhat[dropped_data$ds %in% historical_forecast$ds]
dropped_data$residuals <- dropped_data$y - dropped_data$predicted
dropped_data$abs_error <- abs(dropped_data$y - dropped_data$predicted)
print(dropped_data)
# Calculate MAE, RMSE, and MAPE
mae <- mean(dropped_data$abs_error, na.rm = TRUE)
# Print the error metrics
cat("MAE:", mae, "\n")
# Assuming your residuals and predicted values are correctly calculated
bp_test <- bptest(dropped_data$residuals ~ dropped_data$predicted, data = dropped_data)
print(bp_test)
# Fit the model
model <- prophet(dropped_data, changepoint.prior.scale = 1)
# Make a dataframe to hold predictions for the next 12 months
future <- make_future_dataframe(model, periods = 36, freq = "month")
# Generate predictions
preds <- predict(model, future)
# Plot the forecast with yearly dates on the x-axis
plot(model, preds)
# Plot the forecast components
components_plot <- prophet_plot_components(model, preds)
dyplot.prophet(model, preds)
# Print the predicted values
print(preds[['yhat']])
# Ensure both are Date objects
preds$ds <- as.Date(preds$ds)
# Assuming `df` is your original dataset with actual values
historical_forecast <- preds[preds$ds %in% dropped_data$ds, ]
dropped_data$predicted <- historical_forecast$yhat[dropped_data$ds %in% historical_forecast$ds]
dropped_data$residuals <- dropped_data$y - dropped_data$predicted
dropped_data$abs_error <- abs(dropped_data$y - dropped_data$predicted)
print(dropped_data)
# Calculate MAE, RMSE, and MAPE
mae <- mean(dropped_data$abs_error, na.rm = TRUE)
# Print the error metrics
cat("MAE:", mae, "\n")
# Fit the model
model <- prophet(dropped_data, changepoint.prior.scale = 1.5)
# Make a dataframe to hold predictions for the next 12 months
future <- make_future_dataframe(model, periods = 36, freq = "month")
# Generate predictions
preds <- predict(model, future)
# Plot the forecast with yearly dates on the x-axis
plot(model, preds)
# Plot the forecast components
components_plot <- prophet_plot_components(model, preds)
dyplot.prophet(model, preds)
# Print the predicted values
print(preds[['yhat']])
# Ensure both are Date objects
preds$ds <- as.Date(preds$ds)
# Assuming `df` is your original dataset with actual values
historical_forecast <- preds[preds$ds %in% dropped_data$ds, ]
dropped_data$predicted <- historical_forecast$yhat[dropped_data$ds %in% historical_forecast$ds]
dropped_data$residuals <- dropped_data$y - dropped_data$predicted
dropped_data$abs_error <- abs(dropped_data$y - dropped_data$predicted)
print(dropped_data)
# Calculate MAE, RMSE, and MAPE
mae <- mean(dropped_data$abs_error, na.rm = TRUE)
# Print the error metrics
cat("MAE:", mae, "\n")
# Fit the model
model <- prophet(dropped_data, changepoint.prior.scale = 2)
# Make a dataframe to hold predictions for the next 12 months
future <- make_future_dataframe(model, periods = 36, freq = "month")
# Generate predictions
preds <- predict(model, future)
# Plot the forecast with yearly dates on the x-axis
plot(model, preds)
# Plot the forecast components
components_plot <- prophet_plot_components(model, preds)
dyplot.prophet(model, preds)
# Print the predicted values
print(preds[['yhat']])
# Ensure both are Date objects
preds$ds <- as.Date(preds$ds)
# Assuming `df` is your original dataset with actual values
historical_forecast <- preds[preds$ds %in% dropped_data$ds, ]
dropped_data$predicted <- historical_forecast$yhat[dropped_data$ds %in% historical_forecast$ds]
dropped_data$residuals <- dropped_data$y - dropped_data$predicted
dropped_data$abs_error <- abs(dropped_data$y - dropped_data$predicted)
print(dropped_data)
# Calculate MAE, RMSE, and MAPE
mae <- mean(dropped_data$abs_error, na.rm = TRUE)
# Print the error metrics
cat("MAE:", mae, "\n")
# Plot the residuals
ggplot(dropped_data, aes(x = ds, y = residuals)) +
geom_line() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Residuals Over Time", x = "Time", y = "Residuals")
# Fit the model
model <- prophet(dropped_data, changepoint.prior.scale = 5)
# Make a dataframe to hold predictions for the next 12 months
future <- make_future_dataframe(model, periods = 36, freq = "month")
# Generate predictions
preds <- predict(model, future)
# Plot the forecast with yearly dates on the x-axis
plot(model, preds)
# Plot the forecast components
components_plot <- prophet_plot_components(model, preds)
dyplot.prophet(model, preds)
# Print the predicted values
print(preds[['yhat']])
# Ensure both are Date objects
preds$ds <- as.Date(preds$ds)
# Assuming `df` is your original dataset with actual values
historical_forecast <- preds[preds$ds %in% dropped_data$ds, ]
dropped_data$predicted <- historical_forecast$yhat[dropped_data$ds %in% historical_forecast$ds]
dropped_data$residuals <- dropped_data$y - dropped_data$predicted
dropped_data$abs_error <- abs(dropped_data$y - dropped_data$predicted)
print(dropped_data)
# Calculate MAE, RMSE, and MAPE
mae <- mean(dropped_data$abs_error, na.rm = TRUE)
# Print the error metrics
cat("MAE:", mae, "\n")
# Fit the model
model <- prophet(dropped_data, changepoint.prior.scale = 2)
# Make a dataframe to hold predictions for the next 12 months
future <- make_future_dataframe(model, periods = 36, freq = "month")
# Generate predictions
preds <- predict(model, future)
# Plot the forecast with yearly dates on the x-axis
plot(model, preds)
# Plot the forecast components
components_plot <- prophet_plot_components(model, preds)
dyplot.prophet(model, preds)
# Print the predicted values
print(preds[['yhat']])
# Ensure both are Date objects
preds$ds <- as.Date(preds$ds)
# Assuming `df` is your original dataset with actual values
historical_forecast <- preds[preds$ds %in% dropped_data$ds, ]
dropped_data$predicted <- historical_forecast$yhat[dropped_data$ds %in% historical_forecast$ds]
dropped_data$residuals <- dropped_data$y - dropped_data$predicted
dropped_data$abs_error <- abs(dropped_data$y - dropped_data$predicted)
print(dropped_data)
# Calculate MAE, RMSE, and MAPE
mae <- mean(dropped_data$abs_error, na.rm = TRUE)
# Print the error metrics
cat("MAE:", mae, "\n")
