preds <- predict(model, future)
# Plot the forecast with yearly dates on the x-axis
forecast_plot <- plot(model, preds) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y")
# Display the plot
print(forecast_plot)
# Plot the forecast components
components_plot <- prophet_plot_components(model, preds)
# Print the predicted values
print(preds[['yhat']])
# Clear the environment
rm(list=ls())
library(dplyr)
library(zoo)
library(lubridate) # For year() and month()
library(ggplot2)
library(prophet)
data = read.csv("TotalQuestions.csv")
# Sum up the counts of each question for each language per month
data <- data %>%
mutate(Questions = rowSums(select(., -Month)))
# Convert the Month column to a Date column
data$Month <- ymd(data$Month)
# Ready for Prophet model
data <- rename(data, ds = Month, y = Questions)
dropped_data <- data.frame(
ds = data$ds,
y = data$y
)
print(dropped_data)
ggplot(data = dropped_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Occurrences", title = "Occurrences Over Time") +
theme_minimal()
# Fit the model
model <- prophet(dropped_data)
# Make a dataframe to hold predictions for the next 12 months
future <- make_future_dataframe(model, periods = 12, freq = "month")
# Generate predictions
preds <- predict(model, future)
# Plot the forecast with yearly dates on the x-axis
forecast_plot <- plot(model, preds) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y")
# Display the plot
print(forecast_plot)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
dropped_data <- data.frame(
ds = zoo::yearmon(data$ds),
y = data$y
)
dropped_data <- data.frame(
ds = zoo::yearmon(data$ds),
y = data$y
)
data$yearmon <- as.yearmon(data$ds)
dropped_data <- data.frame(
ds = data$yearmon,
y = data$y
)
print(dropped_data)
ggplot(data = dropped_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Occurrences", title = "Occurrences Over Time") +
theme_minimal()
# Fit the model
model <- prophet(dropped_data)
# Make a dataframe to hold predictions for the next 12 months
future <- make_future_dataframe(model, periods = 12, freq = "month")
# Generate predictions
preds <- predict(model, future)
# Plot the forecast with yearly dates on the x-axis
forecast_plot <- plot(model, preds) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y")
# Display the plot
print(forecast_plot)
# Plot the forecast components
components_plot <- prophet_plot_components(model, preds)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
dropped_data <- data.frame(
ds = as.Date(data$yearmon),
y = data$y
)
print(dropped_data)
ggplot(data = dropped_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Occurrences", title = "Occurrences Over Time") +
theme_minimal()
# Fit the model
model <- prophet(dropped_data)
# Make a dataframe to hold predictions for the next 12 months
future <- make_future_dataframe(model, periods = 12, freq = "month")
# Generate predictions
preds <- predict(model, future)
# Plot the forecast with yearly dates on the x-axis
forecast_plot <- plot(model, preds) +
scale_x_date(date_breaks = "1 year", date_labels = "%Y")
# Display the plot
print(forecast_plot)
# Convert the Month column to a Date column
data$Month <- ymd(data$Month)
# Convert the Month column to a Date column
data$Month <- ymd(data$Month)
# Clear the environment
rm(list=ls())
library(dplyr)
library(zoo)
library(lubridate) # For year() and month()
library(ggplot2)
library(prophet)
data = read.csv("TotalQuestions.csv")
# Sum up the counts of each question for each language per month
data <- data %>%
mutate(Questions = rowSums(select(., -Month)))
# Convert the Month column to a Date column
data$Month <- ymd(data$Month)
data$yearmon <- as.yearmon(data$ds)
# Convert the Month column to a Date column
data$Month <- ymd(data$Month)
# Ready for Prophet model
data <- rename(data, ds = Month, y = Questions)
dropped_data <- data.frame(
ds = as.Date(data$Month),
y = data$y
)
print(dropped_data)
# Clear the environment
rm(list=ls())
# Clear the environment
rm(list=ls())
library(dplyr)
library(zoo)
library(lubridate) # For year() and month()
library(ggplot2)
library(prophet)
# Load and prepare the data
data <- read.csv("TotalQuestions.csv") %>%
mutate(Questions = rowSums(select(., -Month))) %>%
mutate(Month = ymd(Month)) %>%
rename(ds = Month, y = Questions)
# Note: as.yearmon is not necessary for Prophet modeling
# Prophet requires 'ds' to be a Date or datetime object, not a yearmon object
dropped_data <- data.frame(ds = as.Date(data$ds), y = data$y)
# Visualize the data
ggplot(data = dropped_data, aes(x = ds, y = y)) +
geom_line() + geom_point() +
labs(x = "Date", y = "Occurrences", title = "Occurrences Over Time") +
theme_minimal()
# Model fitting and forecasting
model <- prophet(dropped_data)
future <- make_future_dataframe(model, periods = 12, freq = "month")
preds <- predict(model, future)
# Plotting the forecast
forecast_plot <- plot(model, preds) + scale_x_date(date_breaks = "1 year", date_labels = "%Y")
print(forecast_plot)
rlang::last_trace()
# Simplified plot to test date formatting
ggplot(preds, aes(x = ds, y = yhat)) +
geom_line() +
scale_x_date(date_breaks = "1 year", date_labels = "%Y")
# Clear the environment
rm(list=ls())
library(dplyr)
library(zoo)
library(lubridate) # For year() and month()
library(ggplot2)
library(prophet)
data = read.csv("TotalQuestions.csv")
# Sum up the counts of each question for each language per month
data <- data %>%
mutate(Questions = rowSums(select(., -Month)))
# Convert the Month column to a Date column
data$Month <- ymd(data$Month)
# Ready for Prophet model
data <- rename(data, ds = Month, y = Questions)
dropped_data <- data.frame(
ds = as.Date(data$Month),
y = data$y
)
data$yearmon <- as.yearmon(data$ds)
dropped_data <- data.frame(
ds = as.Date(data$yearmon),
y = data$y
)
print(dropped_data)
# Clear the environment
rm(list=ls())
library(dplyr)
library(zoo)
library(lubridate) # For year() and month()
library(ggplot2)
library(prophet)
data = read.csv("TotalQuestions.csv")
# Sum up the counts of each question for each language per month
data <- data %>%
mutate(Questions = rowSums(select(., -Month)))
# Convert the Month column to a Date column
data$yearmon <- as.yearmon(data$ds)
# Ready for Prophet model
data <- rename(data, ds = Month, y = Questions)
# Convert the Month column to a Date column
data$yearmon <- as.yearmon(data$month, "%Y-%m")
# Convert the Month column to a Date column
data$yearmon <- as.yearmon(data$Month, "%Y-%m")
print(data)
print(data$Month)
data = read.csv("TotalQuestions.csv")
# Sum up the counts of each question for each language per month
data <- data %>%
mutate(Questions = rowSums(select(., -Month)))
print(data$Month)
data$yearmon <- as.yearmon(data$Month, "%Y-%m")
# Ready for Prophet model
data <- rename(data, ds = Month, y = Questions)
dropped_data <- data.frame(
ds = as.Date(data$yearmon),
y = data$y
)
print(dropped_data)
ggplot(data = dropped_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Occurrences", title = "Occurrences Over Time") +
theme_minimal()
# Fit the model
model <- prophet(dropped_data)
# Make a dataframe to hold predictions for the next 12 months
future <- make_future_dataframe(model, periods = 12, freq = "month")
# Generate predictions
preds <- predict(model, future)
# Plot the forecast with yearly dates on the x-axis
plot(model, preds)
# Plot the forecast components
components_plot <- prophet_plot_components(model, preds)
# Clear the environment
rm(list=ls())
library(dplyr)
library(zoo)
library(lubridate) # For year() and month()
library(ggplot2)
library(prophet)
data = read.csv("TotalQuestions.csv")
# Sum up the counts of each question for each language per month
data <- data %>%
mutate(Questions = rowSums(select(., -Month)))
print(data$Month)
# Convert the Month column to a Date column
data$yearmon <- as.yearmon(data$Month, "%Y-%m")
# Ready for Prophet model
data <- rename(data, ds = Month, y = Questions)
dropped_data <- data.frame(
ds = as.Date(data$yearmon),
y = data$y
)
print(dropped_data)
ggplot(data = dropped_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Occurrences", title = "Occurrences Over Time") +
theme_minimal()
# Fit the model
model <- prophet(dropped_data)
# Make a dataframe to hold predictions for the next 12 months
future <- make_future_dataframe(model, periods = 12, freq = "month")
# Generate predictions
preds <- predict(model, future)
# Plot the forecast with yearly dates on the x-axis
plot(model, preds)
# Plot the forecast components
components_plot <- prophet_plot_components(model, preds)
dyplot(model, preds)
install.packages("dyplot")
library(dygraphs)
dyplot(model, preds)
dygraphs::dyplot(model, preds)
dyplot.prophet(model, preds)
data = read.csv("TotalQuestions.csv")
# Sum up the counts of each question for each language per month
data <- data %>%
mutate(Questions = rowSums(select(., -Month)))
# Convert the Month column to a Date column
data$yearmon <- as.yearmon(data$Month, "%Y-%m")
# Ready for Prophet model
data <- rename(data, ds = Month, y = Questions)
dropped_data <- data.frame(
ds = as.Date(data$yearmon),
y = data$y
)
print(dropped_data)
ggplot(data = dropped_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Occurrences", title = "Occurrences Over Time") +
theme_minimal()
data = read.csv("TotalQuestions.csv")
# Sum up the counts of each question for each language per month
data <- data %>%
mutate(Questions = rowSums(select(., -Month)))
# Convert the Month column to a Date column
data$yearmon <- as.yearmon(data$Month, "%Y-%m")
# Ready for Prophet model
data <- rename(data, ds = Month, y = Questions)
dropped_data <- data.frame(
ds = as.Date(data$yearmon),
y = data$y
)
ggplot(data = dropped_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Occurrences", title = "Occurrences Over Time") +
theme_minimal()
# Fit the model
model <- prophet(dropped_data)
# Make a dataframe to hold predictions for the next 12 months
future <- make_future_dataframe(model, periods = 12, freq = "month")
# Generate predictions
preds <- predict(model, future)
# Plot the forecast with yearly dates on the x-axis
plot(model, preds)
# Plot the forecast components
components_plot <- prophet_plot_components(model, preds)
# Plot the forecast with yearly dates on the x-axis, using a dynamic plot
dyplot.prophet(model, preds)
# Plot the forecast components
components_plot <- prophet_plot_components(model, preds)
data = read.csv("TotalQuestions.csv")
# Sum up the counts of each question for each language per month
data <- data mutate(Questions = rowSums(select(., -Month)))
# Load the necessary libraries
library(zoo)
library(ggplot2)
library(prophet)
library(dygraphs)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
# Load the necessary libraries
library(zoo)
library(ggplot2)
library(prophet)
library(dygraphs)
library(dplyr)
})
?dropped_data
model <- prophet(dropped_data)
model <- prophet(dropped_data)
# Make a dataframe to hold predictions for the next 12 months
future <- make_future_dataframe(model, periods = 12, freq = "month")
# Generate predictions
preds <- predict(model, future)
start_date <- min(dropped_data$ds)   # Find the first date
dropped_data$time_since_start <- as.numeric(dropped_data$ds - start_date)  # Days since start
linear_model <- lm(y ~ time_since_start, data = data)
View(dropped_data)
linear_model <- lm(dropped_data$y ~ dropped_data$time_since_start, data = data)
summary(model)
ggplot(data, aes(x = time_since_start, y = y)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(x = "Time Since Start (days)", y = "Number of Questions", title = "Trend of Questions Asked Over Time")
ggplot(data, aes(x = dropped_data$time_since_start, y = dropped_data$y)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(x = "Time Since Start (days)", y = "Number of Questions", title = "Trend of Questions Asked Over Time")
dropped_data$log_y <- log(dropped_data$y)
linear_model <- lm(dropped_data$log_y ~ dropped_data$time_since_start, data = data)
summary(model)
ggplot(data, aes(x = dropped_data$time_since_start, y = dropped_data$y)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(x = "Time Since Start (days)", y = "Number of Questions", title = "Trend of Questions Asked Over Time")
# Clear the environment
rm(list=ls())
ggplot(dropped_data, aes(x = dropped_data$time_since_start, y = dropped_data$log_y)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(x = "Time Since Start (days)", y = "Number of Questions", title = "Trend of Questions Asked Over Time")
start_date <- min(dropped_data$ds)   # Find the first date
library(dplyr)
library(zoo)
library(lubridate) # For year() and month()
library(ggplot2)
library(prophet)
library(dygraphs)
data = read.csv("TotalQuestions.csv")
# Sum up the counts of each question for each language per month
data <- data %>%
mutate(Questions = rowSums(select(., -Month)))
# Convert the Month column to a Date column
data$yearmon <- as.yearmon(data$Month, "%Y-%m")
# Ready for Prophet model
data <- rename(data, ds = Month, y = Questions)
dropped_data <- data.frame(
ds = as.Date(data$yearmon),
y = data$y
)
print(dropped_data)
ggplot(data = dropped_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Occurrences", title = "Occurrences Over Time") +
theme_minimal()
# Fit the model
model <- prophet(dropped_data)
# Make a dataframe to hold predictions for the next 12 months
future <- make_future_dataframe(model, periods = 12, freq = "month")
# Generate predictions
preds <- predict(model, future)
# Plot the forecast with yearly dates on the x-axis
plot(model, preds)
# Plot the forecast components
components_plot <- prophet_plot_components(model, preds)
dyplot.prophet(model, preds)
# Print the predicted values
print(preds[['yhat']])
start_date <- min(dropped_data$ds)   # Find the first date
dropped_data$time_since_start <- as.numeric(dropped_data$ds - start_date)  # Days since start
dropped_data$log_y <- log(dropped_data$y)
View(dropped_data)
linear_model <- lm(dropped_data$log_y ~ dropped_data$time_since_start, data = data)
summary(model)
ggplot(dropped_data, aes(x = dropped_data$time_since_start, y = dropped_data$log_y)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(x = "Time Since Start (days)", y = "Number of Questions", title = "Trend of Questions Asked Over Time")
dropped_data <- data.frame(
ds = as.Date(data$yearmon),
y = log(data$y)
)
print(dropped_data)
ggplot(data = dropped_data, aes(x = ds, y = y)) +
geom_line() + # Draws the line connecting points
geom_point() + # Adds points at each data point
labs(x = "Date", y = "Occurrences", title = "Occurrences Over Time") +
theme_minimal()
# Fit the model
model <- prophet(dropped_data)
# Make a dataframe to hold predictions for the next 12 months
future <- make_future_dataframe(model, periods = 12, freq = "month")
# Generate predictions
preds <- predict(model, future)
# Plot the forecast with yearly dates on the x-axis
plot(model, preds)
# Plot the forecast components
components_plot <- prophet_plot_components(model, preds)
# Make a dataframe to hold predictions for the next 12 months
future <- make_future_dataframe(model, periods = 48, freq = "month")
# Generate predictions
preds <- predict(model, future)
# Plot the forecast with yearly dates on the x-axis
plot(model, preds)
# Plot the forecast components
components_plot <- prophet_plot_components(model, preds)
# Make a dataframe to hold predictions for the next 12 months
future <- make_future_dataframe(model, periods = 60, freq = "month")
# Generate predictions
preds <- predict(model, future)
# Plot the forecast with yearly dates on the x-axis
plot(model, preds)
# Plot the forecast components
components_plot <- prophet_plot_components(model, preds)
dyplot.prophet(model, preds)
library(forecast)
install.packages("forecast")
library(forecast)
boxcox.lambda(dropped_date$ds)
# Assuming `df` is your original dataset with actual values
historical_forecast <- preds[preds$ds %in% dropped_data$ds, ]
dropped_data$predicted <- historical_forecast$yhat[dropped_data$ds %in% historical_forecast$ds]
View(preds)
# Assuming `df` is your original dataset with actual values
historical_forecast <- preds[preds$ds %in% dropped_data$ds]
# Assuming `df` is your original dataset with actual values
historical_forecast <- preds[preds$ds %in% dropped_data$ds, ]
View(historical_forecast)
View(preds)
View(dropped_data)
View(preds)
preds$ds <- as.Date(preds$ds)
# Assuming `df` is your original dataset with actual values
historical_forecast <- preds[preds$ds %in% dropped_data$ds, ]
dropped_data$predicted <- historical_forecast$yhat[dropped_data$ds %in% historical_forecast$ds]
dropped_data$residuals <- dropped_data$y - dropped_data$predicted
# Plot the residuals
ggplot(df, aes(x = ds, y = residuals)) +
geom_line() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Residuals Over Time", x = "Time", y = "Residuals")
# Plot the residuals
ggplot(dropped_data, aes(x = ds, y = residuals)) +
geom_line() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Residuals Over Time", x = "Time", y = "Residuals")
ggplot(dropped_data, aes(x = predicted, y = residuals)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(title = "Residuals vs. Predicted Values", x = "Predicted", y = "Residuals")
# Assuming your residuals and predicted values are correctly calculated
bp_test <- bptest(dropped_data$residuals ~ dropped_data$predicted, data = dropped_data)
library(lmtest)
install.packages("lmtest")
library(lmtest)
# Assuming your residuals and predicted values are correctly calculated
bp_test <- bptest(dropped_data$residuals ~ dropped_data$predicted, data = dropped_data)
install.packages("lmtest")
g++ --version
install.packages("lmtest")
install.packages("lmtest")
